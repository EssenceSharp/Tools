'From Squeak4.4 of 31 December 2012 [latest update: #12327] on 7 July 2014 at 2:26:53 pm'!Object subclass: #EssenceClassLibraryExporter	instanceVariableNames: 'essenceNamespacePath localNamespace'	classVariableNames: 'LibraryPath LibraryPathPrefix PathnameDelimiter'	poolDictionaries: ''	category: 'Essence'!!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 18:11'!essenceNamespacePath	^essenceNamespacePath! !!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 18:12'!essenceNamespacePath: aSequenceOfStrings	| size newPath |	size := aSequenceOfStrings size.	newPath := Array new: size.	1 to: size do: [:index | newPath at: index put: (aSequenceOfStrings at: index) asString].	essenceNamespacePath := newPath.! !!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 17:02'!localNamespace	^localNamespace! !!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 17:02'!localNamespace: aLocalNamespace	localNamespace := aLocalNamespace ifNil: [Smalltalk]! !!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 17:06'!organization	^self localNamespace organization! !!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 18:39'!outputPathname		^self class constructPathnameFromPrefix: self class libraryPathname path: self essenceNamespacePath! !!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 18:11'!qualifiedEssenceNamespaceName	| writeStream |	writeStream := (String new: 16) writeStream.	self essenceNamespacePath do: [:pathElement | ] separatedBy: [writeStream nextPut: $.]	! !!EssenceClassLibraryExporter methodsFor: 'accessing' stamp: 'AL 7/2/2014 18:14'!qualifiedEssenceNamespaceName: qualifiedNamespaceName localNamespace: aLocalNamespace		self 		essenceNamespacePath: (self pathElementsOf: qualifiedNamespaceName separator: $.); 		localNamespace: aLocalNamespace	! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 4/26/2014 04:46'!exportClass: aClass	| metaclass |	self 		exportClassDefinition: aClass;		exportClassVariablesOf: aClass;		exportMethodsOf: aClass.	metaclass := aClass class.	self 		exportMetaclassDefinition: metaclass;		exportMethodsOf: metaclass.	(metaclass includesSelector: #initialize)		ifTrue: [self exportInitializationOf: aClass]! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 7/2/2014 17:05'!exportClassCategory: classCategoryName		(self organization listAtCategoryNamed: classCategoryName asSymbol)		do: [:className | self exportClass: (self localNamespace at: className)]! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 7/2/2014 18:40'!exportClassDefinition: aClass	| pathname stream superclass instanceArchitecture instVarNames |		superclass := aClass superclass.	instanceArchitecture := self instanceArchitectureOf: aClass.	instVarNames := aClass instVarNames.	pathname := 		self class				constructPathnameFromPrefix: self outputPathname				path: (Array with: aClass name with: 'class.configure').	stream := self newWriteStream: pathname.	[stream		tab;		nextPutAll: '"Configuration of the instance architecture, initial state and module memberships of ';		nextPutAll: aClass name;		nextPut: $";		cr; cr; tab;		nextPutAll: 'superclass: ';		nextPutAll: (superclass ifNil: ['nil'] ifNotNil: [superclass name]);		nextPut: $;;		cr; tab;		nextPutAll: 'instanceArchitecture: ';		nextPutAll: instanceArchitecture printString.		instVarNames size > 0			ifTrue: 				[stream					nextPut: $;;					cr; tab;					nextPutAll: 'instanceVariableNames: #('.				instVarNames do: [:each | stream nextPutAll: each] separatedBy: [stream space].				stream nextPut: $)]] ensure: [stream close]! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 7/2/2014 18:40'!exportClassVariablesOf: aClass	| pathnamePrefix |	pathnamePrefix := 		self class				constructPathnameFromPrefix: self outputPathname				path: (Array with: aClass name).	aClass classPool keysAndValuesDo: 		[:key :value | self exportVariableDefinition: key value: value pathPrefix: pathnamePrefix].	! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 7/2/2014 18:40'!exportInitializationOf: aClass	| pathname stream  |		pathname := 		self class				constructPathnameFromPrefix: self outputPathname				path: (Array with: aClass name with: 'class.initialize').	stream := self newWriteStream: pathname.	[stream		tab;		nextPutAll: '"Initialization of ';		nextPutAll: aClass name;		nextPut: $";		cr; cr; tab;		nextPutAll: 'initialize'] ensure: [stream close]! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 7/2/2014 18:40'!exportMetaclassDefinition: aMetaclass	| pathname stream  instVarNames |		instVarNames := aMetaclass instVarNames.	pathname := 		self class				constructPathnameFromPrefix: self outputPathname				path: (Array with: aMetaclass soleInstance name with: 'metaclass.configure').	stream := self newWriteStream: pathname.	[stream		tab;		nextPutAll: '"Configuration of the instance architecture, initial state and module memberships of ';		nextPutAll: aMetaclass name;		nextPut: $".		instVarNames  size > 1			ifTrue: 				[stream					cr; cr; tab;					nextPutAll: 'instanceVariableNames: ';					nextPutAll: instVarNames storeString]] ensure: [stream close]! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 7/1/2014 23:42'!exportMethodIn: protocol source: source on: stream	| lines |	stream		tab;		nextPutAll: 'protocol: ';		nextPutAll: protocol asSymbol printString;		nextPutAll: ' method:';		cr; tab;		nextPutAll: '[## '.	lines := self linesOf: (self withoutEnclosingWhitespace: source asString).	stream nextPutAll: (lines at: 1).	2 to: lines size do: 		[:index | 			stream 				cr; tab: 2;				nextPutAll: (lines at: index)].	stream cr; tab; nextPut: $]	! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 7/2/2014 23:34'!exportMethodsOf: aBehavior 	| isMeta className pathname stream nextRequiresCascadeContinuation |	isMeta := aBehavior isMeta.	className := isMeta ifTrue: [aBehavior soleInstance name] ifFalse: [aBehavior name].	pathname := 		self class				constructPathnameFromPrefix: self outputPathname				path: (Array						with: className						with: (isMeta								ifTrue: ['methods.class']								ifFalse: ['methods.instance'])).	stream := self newWriteStream: pathname.	[stream 		tab; 		nextPut: $";		nextPutAll: (isMeta ifTrue: ['Class'] ifFalse: ['Instance']); 		nextPutAll: ' methods for '; 		nextPutAll: className; 		nextPut: $"; 		cr; cr.	(self protocolsOf: aBehavior)		do: [:protocol | 				nextRequiresCascadeContinuation := false.				(self selectorsOf: aBehavior inProtocol: protocol)					do: [:selector | 						self							exportMethodIn: protocol							source: (aBehavior sourceCodeAt: selector) asString							on: stream.						nextRequiresCascadeContinuation := true]				separatedBy: 					[stream nextPut: $;; cr; cr]]		separatedBy: [nextRequiresCascadeContinuation ifTrue: [stream nextPut: $;; cr; cr]]] 			ensure: [stream close]! !!EssenceClassLibraryExporter methodsFor: 'exporting' stamp: 'AL 4/26/2014 05:01'!exportVariableDefinition: name value: value pathPrefix: pathPrefix	| pathname stream |	pathname := 		self class				constructPathnameFromPrefix: pathPrefix				path: (Array with: name, '.variable').	stream := self newWriteStream: pathname.	[stream 		tab;		nextPutAll: 'accessPrivilege: #InHierarchy;';		cr; tab;		nextPutAll: 'value: ';		nextPutAll: (self initializerValueStringFor: value)] ensure: [stream close]	! !!EssenceClassLibraryExporter methodsFor: 'private' stamp: 'AL 7/2/2014 04:11'!initializerValueStringFor: aValue	(aValue isNumber or: [aValue isString or: [(aValue isKindOf: Boolean) or: [aValue isCharacter]]]) ifTrue: [^aValue printString]. 	^'nil'! !!EssenceClassLibraryExporter methodsFor: 'private' stamp: 'AL 7/2/2014 04:11'!instanceArchitectureOf: aClass	aClass isMeta ifTrue: [^#Class].	^aClass isVariable 		ifTrue: 			[aClass isBits				ifTrue: [aClass isBytes ifTrue: [#IndexedByteSlots] ifFalse: [#IndexedWordSlots]]				ifFalse: [#IndexedObjectSlots]]		ifFalse: [#NamedSlots]! !!EssenceClassLibraryExporter methodsFor: 'inter-Smalltalk compatibility' stamp: 'AL 7/2/2014 04:11'!linesOf: aString	^aString lines ! !!EssenceClassLibraryExporter methodsFor: 'inter-Smalltalk compatibility' stamp: 'AL 7/2/2014 12:25'!newWriteStream: pathname	| prevPathPrefix pathPrefix pathList directory |	pathList := OrderedCollection new.	prevPathPrefix := pathname.	[pathPrefix := FileDirectory dirPathFor: prevPathPrefix.	pathPrefix = prevPathPrefix] 		whileFalse: 			[prevPathPrefix := pathPrefix.			pathList addFirst: pathPrefix].	pathList do: 		[:path | 			directory := FileDirectory on: path.			directory assureExistence].	(FileStream isAFileNamed: pathname) ifTrue: [FileDirectory deleteFilePath: pathname].	^FileStream forceNewFileNamed: pathname! !!EssenceClassLibraryExporter methodsFor: 'inter-Smalltalk compatibility' stamp: 'AL 7/2/2014 04:11'!pathElementsOf: aString separator: separator	^aString findTokens: separator ! !!EssenceClassLibraryExporter methodsFor: 'inter-Smalltalk compatibility' stamp: 'AL 7/2/2014 12:18'!protocolsOf: aBehavior	^aBehavior organization categories asSortedCollection! !!EssenceClassLibraryExporter methodsFor: 'inter-Smalltalk compatibility' stamp: 'AL 7/2/2014 19:12'!selectorsOf: aBehavior inProtocol: protocol	^(aBehavior organization listAtCategoryNamed: protocol) asSortedCollection! !!EssenceClassLibraryExporter methodsFor: 'inter-Smalltalk compatibility' stamp: 'AL 7/2/2014 04:11'!withoutEnclosingWhitespace: aString	^aString withBlanksTrimmed ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EssenceClassLibraryExporter class	instanceVariableNames: ''!!EssenceClassLibraryExporter class methodsFor: 'accessing' stamp: 'AL 4/25/2014 20:52'!libraryPath	^LibraryPath copy! !!EssenceClassLibraryExporter class methodsFor: 'accessing' stamp: 'AL 4/25/2014 20:58'!libraryPath: anArrayOfStrings	| size newLibraryPath |	size := anArrayOfStrings size.	size < 1 		ifTrue:			[LibraryPath := #('.').			^self].	newLibraryPath := Array new: size.	1 to: size do: 		[:index |			newLibraryPath at: index put: (anArrayOfStrings at: index) asString].	LibraryPath := newLibraryPath! !!EssenceClassLibraryExporter class methodsFor: 'accessing' stamp: 'AL 4/25/2014 21:02'!libraryPathPrefix	^LibraryPathPrefix copy! !!EssenceClassLibraryExporter class methodsFor: 'accessing' stamp: 'AL 4/25/2014 21:03'!libraryPathPrefix: aString	LibraryPathPrefix := (aString ifNil: ['.']) asString copy! !!EssenceClassLibraryExporter class methodsFor: 'accessing' stamp: 'AL 7/2/2014 17:07'!libraryPathname	"EssenceClassLibraryExporter libraryPathPrefix: '/Users/chronos/Documents/DEV/Smalltalk/EssenceSharp/Source/Libraries/'"	"EssenceClassLibraryExporter libraryPath: #('Squeak')"		"EssenceClassLibraryExporter libraryPathname"		^self constructPathnameFromPrefix: self libraryPathPrefix path: self libraryPath! !!EssenceClassLibraryExporter class methodsFor: 'accessing' stamp: 'AL 4/25/2014 22:22'!pathnameDelimiter	^PathnameDelimiter! !!EssenceClassLibraryExporter class methodsFor: 'accessing' stamp: 'AL 4/25/2014 22:23'!pathnameDelimiter: aChar	PathnameDelimiter := aChar ifNil: [self defaultPathnameDelimiter]! !!EssenceClassLibraryExporter class methodsFor: 'class initialization' stamp: 'AL 7/2/2014 17:07'!initialize	"EssenceClassLibraryExporter initialize"		PathnameDelimiter := self defaultPathnameDelimiter.	LibraryPathPrefix := '.'.	LibraryPath := #()! !!EssenceClassLibraryExporter class methodsFor: 'examples' stamp: 'AL 7/2/2014 17:07'!exportClassCategory	"EssenceClassLibraryExporter exportClassCategory"		(self exportingTo: 'TickTalk' from: Smalltalk)		exportClassCategory: #TickTalk! !!EssenceClassLibraryExporter class methodsFor: 'examples' stamp: 'AL 7/2/2014 17:08'!exportSelf	"EssenceClassLibraryExporter exportSelf"		(self exportingTo: 'Utilities' from: Smalltalk)		exportClass: self! !!EssenceClassLibraryExporter class methodsFor: 'instance creation' stamp: 'AL 7/2/2014 18:06'!exportingTo: qualifiedNamespaceName from: aLocalNamespace	^self new 		qualifiedEssenceNamespaceName: qualifiedNamespaceName		localNamespace: aLocalNamespace! !!EssenceClassLibraryExporter class methodsFor: 'utilities' stamp: 'AL 7/2/2014 17:08'!exportClass: aClass to: essenceNamespaceName	"EssenceClassLibraryExporter exportClass: AbsolutePrice to: #TickTalk"		(self exportingTo: essenceNamespaceName from: aClass environment)		exportClass: aClass! !!EssenceClassLibraryExporter class methodsFor: 'utilities' stamp: 'AL 7/2/2014 17:11'!exportClassCategory: classCategory from: aLocalNamespace to: essenceNamespaceName	"EssenceClassLibraryExporter exportClassCategory: #TickTalk from: Smalltalk to: #TickTalk"		(self exportingTo: essenceNamespaceName from: aLocalNamespace)		exportClassCategory: classCategory! !!EssenceClassLibraryExporter class methodsFor: 'private' stamp: 'AL 4/28/2014 13:54'!constructPathnameFromPrefix: pathnamePrefix path: pathArray	| writeStream delimiter |	writeStream := (String new: 16) writeStream.	delimiter := self pathnameDelimiter.	writeStream nextPutAll: pathnamePrefix.	((pathnamePrefix endsWith: delimiter asString) or: [pathArray isEmpty])		ifFalse: [writeStream nextPut: delimiter].	pathArray		do: [:pathElement | writeStream nextPutAll: pathElement]		separatedBy: [writeStream nextPut: delimiter].	^writeStream contents	! !!EssenceClassLibraryExporter class methodsFor: 'private' stamp: 'AL 4/25/2014 22:40'!defaultPathnameDelimiter	^FileDirectory pathNameDelimiter! !EssenceClassLibraryExporter initialize!